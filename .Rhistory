peaks_cscan <- peaks_3scans[[2]] %>% dplyr::rename(mz = V1)
peaks_lscan <- peaks_3scans[[1]]
peaks_rscan <- peaks_3scans[[3]]
peaks_cscan$V1min <- peaks_cscan$V1 - mzdelta
peaks_cscan$V1max <- peaks_cscan$V1 + mzdelta
peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max)]
peaks_cscan$V1min <- peaks_cscan$mz - mzdelta
peaks_cscan$V1max <- peaks_cscan$mz + mzdelta
peaks_cscan <- peaks_3scans[[2]] %>% dplyr::rename(mz = V1)
peaks_lscan <- peaks_3scans[[1]]
peaks_rscan <- peaks_3scans[[3]]
peaks_cscan$V1min <- peaks_cscan$mz - mzdelta
peaks_cscan$V1max <- peaks_cscan$mz + mzdelta
peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max)]
r <- peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max)]
r <- peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max), nomatch=0]
View(r)
peaks_lmatch <- peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max), nomatch=0]
peaks_rmatch <- peaks_rscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max), nomatch=0]
peaks_allmatch = peaks_lmatch[peaks_rmatch, on=mz]
peaks_allmatch = peaks_lmatch[peaks_rmatch, on=.(mz==mz)]
View(peaks_allmatch)
peaks_allmatch <- merge(peaks_lmatch, peaks_rmatch, by="mz", all=TRUE)
View(peaks_allmatch)
peaks_allmatch <- merge(peaks_cscan, peaks_lmatch, peaks_rmatch, by="mz", all=TRUE)
peaks_lmatch <- peaks_cscan[peaks_lscan, on=.(V1max >= V1, V1min <= V1)]
peaks_rmatch <- peaks_cscan[peaks_rscan, on=.(V1max >= V1, V1min <= V1)]
peaks_allmatch <- merge(peaks_lmatch, peaks_rmatch, by="mz", all=TRUE)
View(peaks_rmatch)
peaks_lmatch <- peaks_lscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max)]
peaks_rmatch <- peaks_rscan[peaks_cscan, on=.(V1 >= V1min, V1 <= V1max)]
peaks_allmatch <- merge(peaks_lmatch, peaks_rmatch, by="mz", all=TRUE)
View(peaks_allmatch)
peaks_allmatch <- merge(peaks_lmatch, peaks_rmatch, by="mz", all=TRUE)
peaks_allmatch$PKleft <- !is.na(peaks_allmatch$V2.x)
peaks_allmatch$PKright <- !is.na(peaks_allmatch$V2.y)
peaks_allmatch$PKsum <- peaks_allmatch$PKleft + peaks_allmatch$PKright
peaks_allmatch %>%
ggplot() +
aes(x = i.V2.x) +
facet_grid(rows = vars(PKsum)) +
geom_histogram()
peaks_allmatch %>%
ggplot() +
aes(x = log10(i.V2.x)) +
facet_grid(rows = vars(PKsum)) +
geom_histogram()
setwd("C:/Daten/git/SpectraMapping/vignettes")
setwd("C:/Daten/git/SpectraMapping")
library(devtools)
load_all()
system.time(
spMsp <- Spectra(
system.file("test_spectra/sample.msp", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE)))
)
?compact
source('C:/Daten/git/SpectraMapping/R/msp-parser-fast.R', echo=TRUE)
source('C:/Daten/git/SpectraMapping/R/msp-parser-fast.R', echo=TRUE)
system.time(
spMsp <- Spectra(
system.file("test_spectra/sample.msp", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE)))
)
f <- system.file("test_spectra/sample.msp", package="SpectraMapping")
data <- read_file(f) %>% str_remove_all("\r")
d <- data[[44]]
data_ <- str_split(data, "\n\n+")
data_ <- data_[[1]]
r <- data[[22]]
r <- data[[10]]
length(data)
r <- data_[[10]]
r
source('C:/Daten/git/SpectraMapping/R/msp-parser-fast.R', echo=TRUE)
load_all()
system.time(
spMsp <- Spectra(
system.file("test_spectra/sample.msp", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE)))
)
f <- system.file("test_spectra/sample.msp", package="SpectraMapping")
data <- read_file(f) %>% str_remove_all("\r")
data_ <- str_split(data, "\n\n+")
data_ <- data_[[1]]
r <- data[[22]]
r <- data_[[22]]
r
.msp_reader()
rdr <- .msp_reader()
rdr <- .msp_reader(single_spectrum = TRUE)
rdr(r)
res <- rdr(r)
View(res)
numeric("sdfsd")
?readr
?tidyr
?tidyverse
tidyverse_packages()
source('C:/Daten/git/SpectraMapping/R/msp-parser-fast.R', echo=TRUE)
source('C:/Daten/git/SpectraMapping/R/msp-parser-fast.R', echo=TRUE)
rdr <- .msp_reader(single_spectrum = TRUE)
res <- rdr(r)
spectrum <- rdr
safe_spectrum <- function(x, pb=NULL) {
tryCatch({
if(!is.null(pb))
pb$tick()
spectrum(x)
},
error=function(e) {
message("Error: ", x)
return(list(result=NULL))
})
}
safe_spectrum(r)
document <- function(data) {
data_ <- str_split(data, "\n\n+")
data_ <- data_[[1]]
pb <- NULL
if(progress)
pb <- progress::progress_bar$new(total = length(data_))
if(!parallel)
return(data_ %>% map( ~ safe_spectrum(.x, pb)) %>% compact())
else
return(data_ %>% future_map( ~ safe_spectrum(.x), .progress = progress) %>% compact())
}
rrr <- document(data)
progress <- FALSE
rrr <- document(data)
parallel <- FALSE
rrr <- document(data)
library(devtools)
load_all()
system.time(
spMsp <- Spectra(
system.file("test_spectra/sample.msp", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE)))
)
spMsp
res <- spMsp
res <- spectraData(spMsp)
res <- spectraData(spMsp) %>% as_tibble()
View(res)
res$title
load_all()
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
load_all()
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
f <- system.file("test_spectra/sample.mgf", package="SpectraMapping")
d <- read_file(f)
d <- read_file(f) %>% str_remove_all("\r")
data <- read_file(f) %>% str_remove_all("\r")
data_ <- str_split(data, "\n\n+")
data_ <- data_[[1]]
length(data)
length(data_)
sp <- data_[[4]]
# Properties of type XXX=value\n
## Key
specVariable_key <- delimited_string("= ")
## Value
specVariable_value <- specify(
query = delimited_string("\n"),
testcases = c("elende penner! du horst**\"*", "abcsb\nbc"),
leftovers = list("", "\nbc"),
success = c("elende penner! du horst**\"*", "abcsb")
)
# Property
specVariable <- specify(
query = (specVariable_key %then% fixed_string("=") %then% specVariable_value %then% newline
%using% function(x) {
list(formatKey = x[[1]], value = x[[3]])
}),
testcases = list("GUGUS=gaga\n", "MS1PRECURSOR=123123232.1232", "MS1PRECURSOR=123123232.1232\nleft"),
success = list(list(formatKey="GUGUS", value="gaga"),
NULL,
list(formatKey="MS1PRECURSOR", value="123123232.1232")),
leftovers = list("", NULL, "left"))
# Ion table entries of type 123.1234 999
ion <- specify(
query=(
(float %then% spacing %then% float %then% newline)
%using%
function(x) list(mz = x[[1]], int = x[[3]], annotation = NA)
),
testcases = c("123.1234\t666\n", "121.2323     222\n"),
leftovers = c("",""))
# Spectrum: spectrum start delimiter, variable block, ion table, spectrum end delimiter
## Spectrum delimiters
begin_marker <- zap_entry((many_iter(newline)) %then% fixed_string("BEGIN IONS\n"))
end_marker <- zap_entry((fixed_string("END IONS") %then% maybe(newline)))
## spectrum
spectrum_line <- function(line) {
(ion %alt% specVariable %alt% end_marker)
}
spectrum <- function(data) {
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- data %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
stopifnot(spectrum_[[1]])
data <- map(spectrum_, spectrum_line()) %>% map(`$`, "result")
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
ions <- data %>% keep(~ .x$type == "ion") %>% bind_rows() %>% select(-type)
list(variables = vars, ions = ions)
}
spectrum(sp)
spectrum <- function(data) {
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- data %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- map(spectrum_, spectrum_line()) %>% map(`$`, "result")
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
ions <- data %>% keep(~ .x$type == "ion") %>% bind_rows() %>% select(-type)
list(variables = vars, ions = ions)
}
spectrum(sp)
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- spectrum_ %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- map(spectrum_, spectrum_line()) %>% map(`$`, "result")
spectrum <- function(data) {
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- spectrum_ %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- map(spectrum_, spectrum_line()) %>% map(`$`, "result")
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
ions <- data %>% keep(~ .x$type == "ion") %>% bind_rows() %>% select(-type)
list(variables = vars, ions = ions)
}
spectrum(sp)
data <- sp
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- spectrum_ %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- map(spectrum_, spectrum_line()) %>% map(`$`, "result")
source('C:/Daten/git/SpectraMapping/R/mgf-parser-fast.R', echo=TRUE)
load_all()
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
.mgf_reader(single_spectrum = TRUE)
spec <- .mgf_reader(single_spectrum = TRUE)
d <- spec(sp)
data <- sp
# data_ <- str_split(data, "\n\n+")
# data_ <- data_[[1]]
#
#
# spectrum_d <- data_[[22]]
#
# spectrum_ <- spectrum_d %>%
#   str_split("\n") %>%
#   magrittr::extract2(1) %>%
#   map_chr(~ paste0(.x, "\n"))
# Properties of type XXX=value\n
## Key
specVariable_key <- ((regex_replace("Synon: (\\$[0-9][0-9]) ", "\\1") %then% succeed(""))
%alt%
(delimited_string(":") %then% (fixed_string(": "))))
## Value
specVariable_value <- specify(
query = delimited_string("\n"),
testcases = c("elende penner! du horst**\"*", "abcsb\nbc"),
leftovers = list("", "\nbc"),
success = c("elende penner! du horst**\"*", "abcsb")
)
# Property
specVariable <- specify(
query = (specVariable_key %then% specVariable_value %then% newline
%using% function(x) {
list(type = "specVariable", formatKey = x[[1]], value = x[[3]])
}),
testcases = list("GUGUS: gaga\n", "MS1PRECURSOR: 123123232.1232",
"MS1PRECURSOR: 123123232.1232\nleft",
"Synon: $66 synoncomment\nasdf"),
success = list(list(type = "specVariable", formatKey="GUGUS", value="gaga"),
NULL,
list(type = "specVariable", formatKey="MS1PRECURSOR", value="123123232.1232"),
list(type = "specVariable", formatKey="$66", value="synoncomment")),
leftovers = list("", NULL, "left","asdf"))
# Ion table entries of type 123.1234 999
ion_plain <- specify(
query=(
(float %then% spacing %then% float %then% newline)
%using%
function(x) list(type = "ion", mz = x[[1]], int = x[[3]], annotation = NA)
),
testcases = c("123.1234\t666\n", "121.2323     222\n"),
leftovers = c("",""))
ion_annotated <- specify(
query=(
(float %then% spacing %then% float
%then% spacing %then%
fixed_string("\"") %then% delimited_string("\"") %then% fixed_string("\"") %then% newline)
%using%
function(x) list(type = "ion", mz = x[[1]], int = x[[3]], annotation = x[[6]])
),
testcases = c('123.1234\t666\t"asdfa sdfa 2312"\n', '121.2323     222 "myannotation"\n'),
leftovers = c("","")
)
ion  <- (ion_plain %alt% ion_annotated)
#
# # Spectrum: spectrum start delimiter, variable block, ion table, spectrum end delimiter
# ## Spectrum delimiters
# end_marker <- zap_entry(many_iter(newline))
# ## spectrum
# spectrum <- specify(
#   query = ((
#     (many_iter(specVariable) %using% bind_rows)
#     %then%
#       (many_iter(ion) %using% bind_rows)
#     %then%
#       end_marker)
#     %using% function(x) compact(x) %>% (function(xx) list(variables = xx[[1]], ions = xx[[2]]))),
#   testcases = c("Name: Spectra\nSynon: $32 gugus\n121.1212\t4343\n121.3333  3434 \"fasdfasdf\"\n\n"),
#   leftovers = c(""))
#
spectrum_line <- function(line) {
(ion %alt% specVariable)
}
spectrum_ <- data %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
data <- spectrum_ %>% map(spectrum_line()) %>% map(`$`, "result")
# Properties of type XXX=value\n
## Key
specVariable_key <- delimited_string("= ")
## Value
specVariable_value <- specify(
query = delimited_string("\n"),
testcases = c("elende penner! du horst**\"*", "abcsb\nbc"),
leftovers = list("", "\nbc"),
success = c("elende penner! du horst**\"*", "abcsb")
)
# Property
specVariable <- specify(
query = (specVariable_key %then% fixed_string("=") %then% specVariable_value %then% newline
%using% function(x) {
list(formatKey = x[[1]], value = x[[3]])
}),
testcases = list("GUGUS=gaga\n", "MS1PRECURSOR=123123232.1232", "MS1PRECURSOR=123123232.1232\nleft"),
success = list(list(formatKey="GUGUS", value="gaga"),
NULL,
list(formatKey="MS1PRECURSOR", value="123123232.1232")),
leftovers = list("", NULL, "left"))
# Ion table entries of type 123.1234 999
ion <- specify(
query=(
(float %then% spacing %then% float %then% newline)
%using%
function(x) list(mz = x[[1]], int = x[[3]], annotation = NA)
),
testcases = c("123.1234\t666\n", "121.2323     222\n"),
leftovers = c("",""))
# Spectrum: spectrum start delimiter, variable block, ion table, spectrum end delimiter
## Spectrum delimiters
begin_marker <- zap_entry((many_iter(newline)) %then% fixed_string("BEGIN IONS\n"))
end_marker <- zap_entry((fixed_string("END IONS") %then% maybe(newline)))
## spectrum
# Properties of type XXX=value\n
## Key
specVariable_key <- delimited_string("= ")
## Value
specVariable_value <- specify(
query = delimited_string("\n"),
testcases = c("elende penner! du horst**\"*", "abcsb\nbc"),
leftovers = list("", "\nbc"),
success = c("elende penner! du horst**\"*", "abcsb")
)
# Property
specVariable <- specify(
query = (specVariable_key %then% fixed_string("=") %then% specVariable_value %then% newline
%using% function(x) {
list(type = "specVariable", formatKey = x[[1]], value = x[[3]])
}),
testcases = list("GUGUS=gaga\n", "MS1PRECURSOR=123123232.1232", "MS1PRECURSOR=123123232.1232\nleft"),
success = list(list(type = "specVariable", formatKey="GUGUS", value="gaga"),
NULL,
list(type = "specVariable", formatKey="MS1PRECURSOR", value="123123232.1232")),
leftovers = list("", NULL, "left"))
# Ion table entries of type 123.1234 999
ion <- specify(
query=(
(float %then% spacing %then% float %then% newline)
%using%
function(x) list(type = "ion", mz = x[[1]], int = x[[3]], annotation = NA)
),
testcases = c("123.1234\t666\n", "121.2323     222\n"),
leftovers = c("",""))
# Spectrum: spectrum start delimiter, variable block, ion table, spectrum end delimiter
## Spectrum delimiters
begin_marker <- zap_entry((many_iter(newline)) %then% fixed_string("BEGIN IONS\n"))
end_marker <- zap_entry((fixed_string("END IONS") %then% maybe(newline)))
## spectrum
spectrum_line <- function(line) {
(ion %alt% specVariable %alt% end_marker)
}
spectrum <- function(data) {
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- spectrum_ %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- spectrum_ %>% map(spectrum_line()) %>% map(`$`, "result")
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
ions <- data %>% keep(~ .x$type == "ion") %>% bind_rows() %>% select(-type)
list(variables = vars, ions = ions)
}
# spectrum <- specify(
#   query = (begin_marker %then%
#              (many_iter(specVariable) %using% bind_rows)
#            %then%
#              (many_iter(ion) %using% bind_rows)
#            %then%
#              end_marker)
#   %using% function(x) compact(x) %>% (function(xx) list(variables = xx[[1]], ions = xx[[2]])),
#   testcases = c("\nBEGIN IONS\nSCANS=NA\nblub=TEST\n121.1212\t4343\n121.3333  3434\nEND IONS\n",
#                 "\nBEGIN IONS\nSCANS=NA\nblub=TEST\n121.1212\t4343\n121.3333  3434\nEND IONS"),
#   leftovers = c("", ""))
if(single_spectrum)
return(spectrum)
safe_spectrum <- function(x, pb=NULL) {
tryCatch({
if(!is.null(pb))
pb$tick()
spectrum(x)
},
error=function(e) {
message("Error: ", x)
return(list(result=NULL))
})
}
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
data <- sp
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- data %>% begin_marker() %>% extract2("leftovers")
spectrum_ <- data %>% begin_marker() %>% extract2("leftover")
spectrum_ <- spectrum_ %>% str_split("\n") %>% extract2(1) %>% map(~ paste0(.x, "\n"))
#stopifnot(spectrum_[[1]])
data <- spectrum_ %>% map(spectrum_line()) %>% map(`$`, "result")
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
vars <- data %>% map(~ .x$type == "specVariable")
View(vars)
#stopifnot(spectrum_[[1]])
data <- spectrum_ %>% map(spectrum_line()) %>% map(`$`, "result") %>% compact()
vars <- data %>% keep(~ .x$type == "specVariable") %>% bind_rows() %>% select(-type)
ions <- data %>% keep(~ .x$type == "ion") %>% bind_rows() %>% select(-type)
list(variables = vars, ions = ions)
source('C:/Daten/git/SpectraMapping/R/mgf-parser-fast.R', echo=TRUE)
load_all()
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
View(spMgf)
d <- spectraData(spMgf)
d <- spectraData(spMgf) %>% as_tibble()
View(d)
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
d <- spectraData(spMgf) %>% as_tibble()
peaks(d)
peaks(spMgf)
intensities(spMgf)
intensity(spMgf)
mz(spMgf)
massbank <- r"(C:\Daten\AnnotationFlow\AnnotationFlow\libraries\MASSBANK.mgf)"
system.time(sp3 <- Spectra(
massbank,
source = MsBackendMapping(format = MsFormatMgf(parallel=TRUE, progress = TRUE)))
)
massbank <- r"(C:\Daten\AnnotationFlow\AnnotationFlow\libraries\MASSBANK.mgf)"
system.time(sp3 <- Spectra(
massbank,
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE, progress = TRUE)))
)
library(furrr)
library(devtools)
#library(SpectraMapping)
load_all()
library(readr)
system.time(
spMgf <- Spectra(
system.file("test_spectra/sample.mgf", package="SpectraMapping"),
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE)))
)
massbank <- r"(C:\Daten\AnnotationFlow\AnnotationFlow\libraries\MASSBANK.mgf)"
system.time(sp3 <- Spectra(
massbank,
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE, progress = TRUE)))
)
library(MsBackendMgf)
system.time(sp4 <- Spectra(
massbank,
source = MsBackendMgf())
)
#library(SpectraMapping)
load_all()
system.time(sp3 <- Spectra(
massbank,
source = MsBackendMapping(format = MsFormatMgf(parallel=FALSE, progress = TRUE)))
)
