sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
da <- spectraData(sp_arus_mapped)
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
tibble(aA=c(1,2,3)) %>% select(all_of(aA))
tibble(aA=c(1,2,3)) %>% dplyr::select(all_of(aA))
tibble(aA=c(1,2,3)) %>% dplyr::select(all_of("aA"))
tibble(aA=c(1,2,3)) %>% dplyr::select(all_of("aA", "hh"))
tibble(aA=c(1,2,3)) %>% dplyr::select(all_of(c("aA", "hh")))
tibble(aA=c(1,2,3)) %>% extract(bb)
tibble(aA=c(1,2,3)) %>% extract(aA)
tibble(aA=c(1,2,3)) %>% extract(aA, into = 1)
tibble(aA=c(1,2,3)) %>% extract(aA, into = "b")
tibble(aA=c(1,2,3)) %>% extract(aAs, into = "b")
tibble(aA=c(1,2,3)) %>% mutate(x=glue("{aA}{bB}"))
tibble(aA=c(1,2,3)) %>% mutate(x=glue("{aA}"))
tibble(aA=c(1,2,3)) %>% nest(col = starts_with(aA))
tibble(aA=c(1,2,3)) %>% nest(col = starts_with("aA"))
tibble(aA=c(1,2,3)) %>% nest(col = starts_with("xxx"))
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
load_all()
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
data@variables -> vv
vv
vv$rtime
vv$rtime_conversion_factor
6 / "2"
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
data@variables -> vv
vv$rtime_conversion_factor
vv$rtime
params$write
vv %>% glue_data({rtime})
vv %>% glue_data({"rtime"})
vv %>% glue_data("{rtime}")
vv %>% glue_data("{rtime + 1}")
vv %>% glue_data("{map(rtime, ~.x + 1)}")
vv %>% glue_data("{map(rtime, ~.x + 2)}")
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
options(error=recover)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
params$omit
data@fields
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
data@variables -> vv
vv
vv$rtime_conversion_factor
vv$rtime
class(vv$rtime)
type(vv$rtime)
vv$rtime_conversion_factor
as(vv$rtime_conversion_factor, "numeric")
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
#   file = "massbank_out/{spectrum_id}.txt")
# )
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
load_all()
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
colnames(data@variables)
library(devtools)
library(tidyverse)
library(Spectra)
load_all()
msp_arus <- system.file("test_spectra/sample.msp", package="SpectraMapping")
sp_arus <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE, progress = TRUE)))
msp_arus_mapping <- system.file("mapping/nist-msp-arus.yaml", package="SpectraMapping")
sp_arus_mapped <- mapVariables(sp_arus, msp_arus_mapping)
sp_arus_map_directly <- Spectra(
msp_arus,
source = MsBackendMapping(format = MsFormatMsp(parallel=FALSE,
progress = TRUE,
mapping = msp_arus_mapping))
)
massbank_read_test <- list.files(
system.file("test_spectra/massbank", package="SpectraMapping"), full.names = TRUE)
sp_massbank <- Spectra(
massbank_read_test,
source = MsBackendMapping(format = MsFormatMassbank(parallel=FALSE,
progress = TRUE,
mapping = "default")))
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
options(error=recover)
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
rlang::last_error()
data@variables -> vv
vv %>% select(starts_with(prfix))
vv %>% select(starts_with(prefix))
vv %>% nest(cols=starts_with(prefix))
vv %>% nest(cols=starts_with(prefix)) -> vvv
vvv$cols
export(
sp_arus_mapped,
MsBackendMapping(format = MsFormatMassbank(
parallel = FALSE,
progress = TRUE,
mapping = "default"
))
)
install_github("rformassspectrometry/Spectra")
library(devtools)
install_github("rformassspectrometry/Spectra")
library(devtools)
install_github("rformassspectrometry/Spectra")
