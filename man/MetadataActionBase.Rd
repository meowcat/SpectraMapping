% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metadata-actions.R
\name{MetadataActionBase}
\alias{MetadataActionBase}
\title{Base class for metadata actions}
\description{
Base class for metadata actions

Base class for metadata actions
}
\details{
This class is the base for metadata actions.
Any action will be executed by calling the method \code{execute_read} in the read direction, and
\code{execute_write} in the write direction. Actions are parametrized with the \code{settings} field;
the \code{settings} are set by merging the class-specific \code{base_settings} with the partial or full
\code{settings} passed on construction (i.e. base settings are overridden by instance settings).

Instance settings are composed from base settings (which override the base settings
and optional \code{params} "sub-settings". The action is executed once for every
\code{params} sub-settings, which are applied on top of the instance base settings.

This sounds complicated, but is quite simple. Examples:

\if{html}{\out{<div class="sourceCode">}}\preformatted{action: mapping
explicit: TRUE
params:
- \{source: FIELD1, target: field1\}
- \{source: FIELD2, target: field2\}
}\if{html}{\out{</div>}}

Here, \code{FIELD1} is mapped to \code{field1}, \code{FIELD2} is mapped to \code{field2}, and
\code{explicit = TRUE} is valid for both entries. Specific entries may override instance settings:

\if{html}{\out{<div class="sourceCode">}}\preformatted{action: mapping
explicit: TRUE
params:
- \{source: FIELD1, target: field1\}
- \{source: FIELD2, target: field2, explicit: FALSE\}
- \{source: FIELD3, target: field3\}
}\if{html}{\out{</div>}}

Here, \code{explicit = TRUE} is valid for the first and third entries.

If no \code{params} are given, a single action is executed using instance settings:

\if{html}{\out{<div class="sourceCode">}}\preformatted{action: mapping
explicit: TRUE
source: field1
target: FIELD1
}\if{html}{\out{</div>}}

Note that \code{explicit=TRUE} overrides the \code{base_settings} value of \code{explicit=FALSE}. Not setting
\code{explicit} at all would result in \code{explicit=FALSE} behaviour.

Implementing classes should
\itemize{
\item specify appropriate \code{base_settings}
\item implement \code{process_read} and \code{process_write}, which process a \emph{single} action
(i.e. one \code{params} entry). The action obtains the \code{data} input (an \code{MsBackendMapping})
and a \code{params}, which is the merged (sic!) version of parameters. I.e., it contains
the \code{base_settings} overridden by the \code{settings} overridden by the \code{params} entry.
Both return the modified \code{data} (i.e. an \code{MsBackendMapping} object) again.
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{Action name}

\item{\code{base_settings}}{Class base settings}

\item{\code{settings}}{Instance settings}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MetadataActionBase-log_level}{\code{MetadataActionBase$log_level()}}
\item \href{#method-MetadataActionBase-new}{\code{MetadataActionBase$new()}}
\item \href{#method-MetadataActionBase-execute_read}{\code{MetadataActionBase$execute_read()}}
\item \href{#method-MetadataActionBase-process_read}{\code{MetadataActionBase$process_read()}}
\item \href{#method-MetadataActionBase-execute_write}{\code{MetadataActionBase$execute_write()}}
\item \href{#method-MetadataActionBase-process_write}{\code{MetadataActionBase$process_write()}}
\item \href{#method-MetadataActionBase-set_settings}{\code{MetadataActionBase$set_settings()}}
\item \href{#method-MetadataActionBase-merge_settings}{\code{MetadataActionBase$merge_settings()}}
\item \href{#method-MetadataActionBase-clone}{\code{MetadataActionBase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-log_level"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-log_level}{}}}
\subsection{Method \code{log_level()}}{
Log a message with specified level
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$log_level(level, message)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{level}}{Log level, as specified in package ???}

\item{\code{message}}{Message to log}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-new"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-new}{}}}
\subsection{Method \code{new()}}{
Constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$new(settings)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{settings}}{List of class-specific settings which override the base settings.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-execute_read"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-execute_read}{}}}
\subsection{Method \code{execute_read()}}{
Execution wrapper: read
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$execute_read(backend)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backend}}{\code{MsBackendMapping} to execute the metadata mapping step on
\code{execute} is the wrapper around \code{process}.
If there are \code{params}, i.e. multiple steps are executed, \code{execute} loops through them.
(The basic settings are updated with params, then the action is run.)
If there are no params, only a single step is executed (with the "basic" settings.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-process_read"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-process_read}{}}}
\subsection{Method \code{process_read()}}{
Action implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$process_read(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)
\code{process} executes a transformation method and returns the transformed backend.

Here is where the implementation goes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-execute_write"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-execute_write}{}}}
\subsection{Method \code{execute_write()}}{
Execution wrapper: write
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$execute_write(backend)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backend}}{\code{MsBackendMapping} to execute the metadata mapping step on
\code{execute} is the wrapper around \code{process}.
If there are \code{params}, i.e. multiple steps are executed, \code{execute} loops through them.
(The basic settings are updated with params, then the action is run.)
If there are no params, only a single step is executed (with the "basic" settings.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-process_write"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-process_write}{}}}
\subsection{Method \code{process_write()}}{
Action implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$process_write(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)
\code{process} executes a transformation method and returns the transformed backend.

Here is where the implementation goes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-set_settings"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-set_settings}{}}}
\subsection{Method \code{set_settings()}}{
Set settings and verify that they are OK

Any action may/should check settings for consistency
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$set_settings(settings)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{settings}}{List of settings, subclass-specific}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-merge_settings"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-merge_settings}{}}}
\subsection{Method \code{merge_settings()}}{
Update settings with step-specific entry
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$merge_settings(param_settings)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_settings}}{A \code{params} entry from \code{settings}, i.e. a single action step.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionBase-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionBase-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
