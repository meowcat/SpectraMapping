% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metadata-actions.R
\name{MetadataActionMutate}
\alias{MetadataActionMutate}
\title{Metadata action: mutate}
\description{
Metadata action: mutate

Metadata action: mutate
}
\details{
Generate a new field from an old field and optional helper fields.
This uses \code{glue} expressions.
TODO: By default, only a limited set of functions should be
available, since this otherwise allows arbitrary code execution
from a metadata transformation schema.
See https://stackoverflow.com/questions/66174947/r-glue-with-limited-set-of-functions-allowed-in-pattern/66177581#66177581
Continue on \code{glue_restricted} above.
}
\examples{
backend <- get_proto_backend(temp_rt = c(4,5,6,40,50,60),
                             temp_rt_factor = c(1,1,1,60,60,60))
action <- get_proto_action(
   "mutate",
   source = "temp_rt",
   target = "*rtime",
   required = "temp_rt_factor"
   read = "{temp_rt / temp_rt_factor}",
   write = "{rtime * temp_rt_factor}"
)
fw <- action$execute_read(backend)
fw@variables <- fw@variables \%>\% select(-temp_rt)
bw <- action$execute_write(fw)

}
\section{Super class}{
\code{\link[SpectraMapping:MetadataActionBase]{SpectraMapping::MetadataActionBase}} -> \code{MetadataActionMutate}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MetadataActionMutate-process_read}{\code{MetadataActionMutate$process_read()}}
\item \href{#method-MetadataActionMutate-process_write}{\code{MetadataActionMutate$process_write()}}
\item \href{#method-MetadataActionMutate-clone}{\code{MetadataActionMutate$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="execute_read"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-execute_read'><code>SpectraMapping::MetadataActionBase$execute_read()</code></a></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="execute_write"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-execute_write'><code>SpectraMapping::MetadataActionBase$execute_write()</code></a></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="initialize"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-initialize'><code>SpectraMapping::MetadataActionBase$initialize()</code></a></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="log_level"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-log_level'><code>SpectraMapping::MetadataActionBase$log_level()</code></a></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="merge_settings"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-merge_settings'><code>SpectraMapping::MetadataActionBase$merge_settings()</code></a></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="set_settings"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-set_settings'><code>SpectraMapping::MetadataActionBase$set_settings()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionMutate-process_read"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionMutate-process_read}{}}}
\subsection{Method \code{process_read()}}{
read implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionMutate$process_read(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionMutate-process_write"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionMutate-process_write}{}}}
\subsection{Method \code{process_write()}}{
write implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionMutate$process_write(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionMutate-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionMutate-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionMutate$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
