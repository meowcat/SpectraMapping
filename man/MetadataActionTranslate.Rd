% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metadata-actions-translate.R
\name{MetadataActionTranslate}
\alias{MetadataActionTranslate}
\title{Metadata action: translate}
\description{
Metadata action: translate

Metadata action: translate
}
\details{
Performs a dictionary-style translation action for an entry.
In the reading direction, multiple entries may be mapped to one output value;
in the writing direction, a single value needs to be specified.
If \code{coalesce} is set, untranslated values will be copied verbatim.
}
\examples{

backend <- get_proto_backend(MS_TYPE = c("POSITIVE", "P", "n", "gugus", NA))
action <- get_proto_action(
   "translate",
   source = "MS_TYPE",
   target = "*msLevel",
   dictionary = list(
   list(value = 1, read = c("POSITIVE", "P", "p", "pos"), write = "POSITIVE"),
   list(value = 0, read = c("NEGATIVE", "N", "n", "neg"), write = "NEGATIVE")
   )
)
fw <- action$execute_read(backend)
fw@variables <- fw@variables \%>\% select(-MS_TYPE)

# Example with `coalesce`: 
# Note that `coalesce` only works when source and destination type are equal.

backend <- get_proto_backend(MS_TYPE = c("POSITIVE", "P", "n", "gugus", NA))
action <- get_proto_action(
   "translate",
   source = "MS_TYPE",
   target = "*msLevel",
   coalesce = TRUE,
   dictionary = list(
   list(value = "1", read = c("POSITIVE", "P", "p", "pos"), write = "POSITIVE"),
   list(value = "0", read = c("NEGATIVE", "N", "n", "neg"), write = "NEGATIVE")
   )
)

fw <- action$execute_read(backend)
fw@variables <- fw@variables \%>\% select(-MS_TYPE)
bw <- action$execute_write(fw)

}
\section{Super class}{
\code{\link[SpectraMapping:MetadataActionBase]{SpectraMapping::MetadataActionBase}} -> \code{MetadataActionTranslate}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MetadataActionTranslate-process_read}{\code{MetadataActionTranslate$process_read()}}
\item \href{#method-MetadataActionTranslate-process_write}{\code{MetadataActionTranslate$process_write()}}
\item \href{#method-MetadataActionTranslate-clone}{\code{MetadataActionTranslate$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="execute_read"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-execute_read'><code>SpectraMapping::MetadataActionBase$execute_read()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="execute_write"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-execute_write'><code>SpectraMapping::MetadataActionBase$execute_write()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="initialize"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-initialize'><code>SpectraMapping::MetadataActionBase$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="log_level"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-log_level'><code>SpectraMapping::MetadataActionBase$log_level()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="merge_settings"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-merge_settings'><code>SpectraMapping::MetadataActionBase$merge_settings()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SpectraMapping" data-topic="MetadataActionBase" data-id="set_settings"><a href='../../SpectraMapping/html/MetadataActionBase.html#method-MetadataActionBase-set_settings'><code>SpectraMapping::MetadataActionBase$set_settings()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionTranslate-process_read"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionTranslate-process_read}{}}}
\subsection{Method \code{process_read()}}{
read implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionTranslate$process_read(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionTranslate-process_write"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionTranslate-process_write}{}}}
\subsection{Method \code{process_write()}}{
write implementation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionTranslate$process_write(data, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{MsBackendMapping} to execute the metadata mapping step on}

\item{\code{params}}{List of parameters for a single action (one \code{params} entry fully merged.)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MetadataActionTranslate-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MetadataActionTranslate-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetadataActionTranslate$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
