)
data
files
res
peaks
install("C:/Daten/git/SpectraMapping/")
fmt <- MsFormatSirius(parallel = FALSE)
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
sp
?export
be_out <- MsBackendMapping(format=fmt_out)
fmt_out <- MsFormatMassbank(parallel = FALSE)
be_out <- MsBackendMapping(format=fmt_out)
export(sp, be:out)
export(sp, be_out)
d
valuie
value
.fill_peaks(object, value[, c("spectrum_id",
"mz", "intensity")])
export(sp, be_out)
o
o@peaks
peaks %>% as_tibble()
ptype = data.frame(mz = numeric(0), intensity = numeric(0))
ptype
peaks %>% as_tibble() %>% tidyr::unchop(c(mz,
intensity), ptype = data.frame(mz = numeric(0), intensity = numeric(0)))
peaks %>% as_tibble()
?unchop
peaks %>% as_tibble() %>% tidyr::unchop(c(mz,
intensity))
install("C:/Daten/git/SpectraMapping/")
library(SpectraMapping)
library(fs)
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE)
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
fmt_out <- MsFormatMassbank(parallel = FALSE)
be_out <- MsBackendMapping(format=fmt_out)
export(sp, be_out)
export(sp, be_out, file="gugus.txt")
fmt_out
fmt_out$mapping
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, , mapping = "default")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "default")
be_out <- MsBackendMapping(format=fmt_out)
export(sp, be_out, file="gugus.txt")
sp
spectraData(sp)
fmt <- MsFormatSirius(parallel = FALSE, , mapping = "default")
install("C:/Daten/git/SpectraMapping/")
library(devtools)
install("C:/Daten/git/SpectraMapping/")
install("C:/Daten/git/SpectraMapping/")
library(SpectraMapping)
library(fs)
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, , mapping = "default")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "default")
be_out <- MsBackendMapping(format=fmt_out)
export(sp, be_out, file="gugus.txt")
spectraData(sp)
options(error=recover)
spectraData(sp)
export(sp, be_out, file="gugus.txt")
actions
.x
.y
.y$base_settings
.y$settings
.x
spectraData(sp)
fmt <- MsFormatSirius(parallel = FALSE, , mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "default")
be_out <- MsBackendMapping(format=fmt_out)
export(sp, be_out, file="gugus.txt")
spectraData(sp)$accession <- seq_along(sp)
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "default")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
library(glue)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "default")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
spectraData(sp)$msLevel <- 2
export(sp, be_out, file="out/{accession}.txt")
library(yaml)
params <- read_yaml("instrument_params.yaml")
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
export(sp, be_out, file="out/{accession}.txt")
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out")
zip::zip("out.zip", "out")
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = T)
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
library(rcdk)
s <- parse.smiles("CCC")
get.exact.mass(s)
s <- parse.smiles("CCC")
get.exact.mass(s[[1]])
spectraData(sp)$smiles %>%
parse.smiles() %>%
map_dbl(get.exact.mass
)
library(tidyverse)
spectraData(sp)$smiles %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
spectraData(sp)$smiles
spectraData(sp)$exactmass <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
spectraData(sp)$exactmass <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
source("https://github.com/meowcat/AnnotationFlow/blob/325b07a1d82da787b4d17179a72425ef93871728/scripts/actions/merge_annotations/tools_inchi.R")
source("tools_inchi.R")
install_github("CDK-R/rinchi")
library(devtoosl)
library(devtools)
install_github("CDK-R/rinchi")
source("tools_inchi.R")
spectraData(sp)
adducts <-spectraData(sp)$adduct %>% parse_adduct()
adducts <- spectraData(sp)$adduct %>% map_dfr(parse_adduct)
library(RMassBank)
adducts <- spectraData(sp)$adduct %>% map_dfr(parse_adduct)
adducts
adducts <- spectraData(sp)$adduct %>% parse_adduct
adducts <- spectraData(sp)$adduct %>% parse_adduct()
source("annoflow_tools.R")
source("annoflow_tools.R")
adducts$charge
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "char", "string" )
polarity_dict
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "ion", "string" )
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
adducts <- spectraData(sp)$adduct %>% parse_adduct()
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "ion", "string" )
spectraData(sp)$exactmass <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "ion", "bool_int" )
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
adducts <- spectraData(sp)$adduct %>% parse_adduct()
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "ion", "bool_int" )
spectraData(sp)$exactmass <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
peaksData(sp)
options(error=recover)
peaksData(sp)
object@backend
3
peaksData(sp)
peaksData(sp)
peaksData(sp)
sp@backend@peaks
peaksData(sp@backend)()
peaksData(sp@backend)
spectraData(sp)$splash <- peaksData(sp@backend) %>% map_chr(RMassBank:::getSplash)
spectraData(sp)$splash
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
source("tools_inchi.R")
source("annoflow_tools.R")
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)$accession <- glue("MSBNK-ACES-XXXX{seq_along(sp)}")
spectraData(sp)$msLevel <- 2
adducts <- spectraData(sp)$adduct %>% parse_adduct()
spectraData(sp)$polarity <- polarity_dict(adducts$charge, "ion", "bool_int" )
spectraData(sp)$exactmass <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles() %>%
map_dbl(get.exact.mass)
spectraData(sp)$splash <- peaksData(sp@backend) %>% map_chr(RMassBank:::getSplash)
for(param in names(params))
spectraData(sp)[param] <- params[[param]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
zip::zip("out.zip", "out")
fs::file_copy("out.zip", r"(Q:\Querprojekte\LC-MS\Uchem-Scratch\1044_MassBank\ServerRecords-test)", overwrite = TRUE)
library(jsonlite)
library(httr)
toJSON(list(actionName = "Refresh eawag-test instance")
)
toJSON(list(actionName = "Refresh eawag-test instance"), auto_unbox = TRUE)
res <- httr::POST(
"http://eaw-msf2:1111/api/StartAction",
body = toJSON(list(actionName = "Refresh eawag-test instance"), auto_unbox = TRUE))
res
content(res)
print(content(res)$logEntry$stdout)
install.packages("prettycode")
library(prettycode)
print(content(res)$logEntry$stdout)
prettycode::prettycode()
print(content(res)$logEntry$stdout)
stdout <- content(res)$logEntry$stdout
stdout[1]
str_sub(stdout, 1, 2)
str_sub(stdout, 1, 1)
str_sub(stdout, 1, 4)
str_sub(stdout, 1, 3)
install.packages(
"paint",
repos = c(mm = "https://milesmcbain.r-universe.dev", getOption("repos")))
library(paint)
paint(stdout)
hasColorConsole()
rstudioapi::hasColorConsole()
cat(stdout)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
spectraData(sp)$molecule <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles()
spectraData(sp)$exactmass <-
spectraData(sp)$molecule %>%
map_dbl(get.exact.mass)
spectraData(sp)$inchi <-
spectraData(sp)$molecule %>%
map:chr(rinchi::get.inchi)
spectraData(sp)$inchi <-
spectraData(sp)$molecule %>%
map_chr(rinchi::get.inchi)
spectraData(sp)$inchi
spectraData(sp)$inchi
spectraData(sp)$inchikey <-
spectraData(sp)$molecule %>%
map_chr(rinchi::get.inchi.key)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
spectraData(sp)$formula <-
spectraData(sp)$molecule %>%
map_chr(.mg_get_mf)
.mg_get_mf
spectraData(sp)$formula <-
spectraData(sp)$molecule %>%
.mg_get_mf()
spectraData(sp)$molecule %>%
.mg_get_mf()
spectraData(sp)$molecule <-
spectraData(sp)$smiles %>%
unlist() %>%
parse.smiles()
spectraData(sp)$formula <-
spectraData(sp)$molecule %>%
.mg_get_mf()
spectraData(sp)$formula
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
spectraData(sp)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
params <- read_yaml("instrument_params.yaml")
in_spectra <- fs::dir_ls(glob="*.ms")
fmt <- MsFormatSirius(parallel = FALSE, mapping = "sirius.yaml")
sp <- Spectra(
in_spectra[[1]],
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
spectraData(sp)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
spectraData(sp)$collisionEnergy
spectraData(sp)$collisionEnergy[[2]] <- NA
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
spectraData(sp)$collisionEnergy[[2]]
fmt_out <- MsFormatMassbank(parallel = FALSE, mapping = "massbank_im.yaml")
be_out <- MsBackendMapping(format=fmt_out)
fs::dir_create("out")
export(sp, be_out, file="out/{accession}.txt")
sp <- Spectra(
in_spectra,
source = MsBackendMapping(format = fmt),
parallel = FALSE
)
sp
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
source("C:/Daten/Spectral_Libraries/OHPCB/OHPCB_MS2_spectra/convert.R", echo=TRUE)
setwd("C:/Daten/git/SpectraMapping/inst/mapping")
