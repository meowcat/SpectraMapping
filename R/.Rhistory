entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
# Both could still be NULL,
# if there is not even a formatKey specified:
tbl <- tibble(spectraKey = c(), formatKey = c(), type = c())
if(length(entry$formatReadKey) > 0)
tblRead <- tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
else
tblRead <- tbl
if(length(entry$formatWriteKey) > 0)
tblWrite <- tibble(
spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey),
formatKey = entry$formatWriteKey,
type = rep("write", length(entry$formatWriteKey)
)
else
tblWrite <- tbl
bind_rows(list(tblRead, tblWrite))
})
mapping_dfr
}
# Mapping: returns a tibble with columns
# format_key character, spectra_key character, writable logical
spectraMapping <- function(mapping) {
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
mapping_dfr <- mapping_ %>% map(function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
# Both could still be NULL,
# if there is not even a formatKey specified:
tbl <- tibble(spectraKey = c(), formatKey = c(), type = c())
if(length(entry$formatReadKey) > 0)
tblRead <- tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
else
tblRead <- tbl
if(length(entry$formatWriteKey) > 0)
tblWrite <- tibble(
spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey),
formatKey = entry$formatWriteKey,
type = rep("write", length(entry$formatWriteKey))
)
else
tblWrite <- tbl
bind_rows(list(tblRead, tblWrite))
})
mapping_dfr
}
# Mapping: returns a tibble with columns
# format_key character, spectra_key character, writable logical
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
mapping_dfr <- mapping_ %>% map(function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
# Both could still be NULL,
# if there is not even a formatKey specified:
tbl <- tibble(spectraKey = c(), formatKey = c(), type = c())
if(length(entry$formatReadKey) > 0)
tblRead <- tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
else
tblRead <- tbl
if(length(entry$formatWriteKey) > 0)
tblWrite <- tibble(
spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey)),
formatKey = entry$formatWriteKey,
type = rep("write", length(entry$formatWriteKey))
)
else
tblWrite <- tbl
bind_rows(list(tblRead, tblWrite))
})
mapping_dfr
}
spectraMapping(mapping)
length(NULL)
rep(NULL, 0)
rep(c(), 0)
?keep
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
# Fill up mapping with formatKey where formatReadKey / formatWriteKey are not explicitely set
mapping_ <- mapping %>% map( function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
entry
}
# Remove empty entries
mapping_read <- mapping %>% keep(~ length(.x$formatReadKey) > 0)
mapping_write <- mapping %>% keep(~ length(.x$formatWriteKey) > 0)
mapping_dfr_read <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
}
mapping_read_ <- map_dfr(mapping_read, mapping_dfr_read)
mapping_dfr_write <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey)),
formatKey = entry$formatWriteKey,
type = rep("read", length(entry$formatWriteKey)))
}
mapping_write_ <- map_dfr(mapping_write, mapping_dfr_write)
rbind(mapping_read_, mapping_write_)
}
# Mapping: returns a tibble with columns
# format_key character, spectra_key character, writable logical
spectraMapping <- function(mapping) {
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
# Fill up mapping with formatKey where formatReadKey / formatWriteKey are not explicitely set
mapping_ <- mapping_ %>% map( function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
entry
}
# Remove empty entries
mapping_read <- mapping_ %>% keep(~ length(.x$formatReadKey) > 0)
mapping_write <- mapping_ %>% keep(~ length(.x$formatWriteKey) > 0)
mapping_dfr_read <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
}
mapping_read_ <- map_dfr(mapping_read, mapping_dfr_read)
mapping_dfr_write <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey)),
formatKey = entry$formatWriteKey,
type = rep("read", length(entry$formatWriteKey)))
}
mapping_write_ <- map_dfr(mapping_write, mapping_dfr_write)
rbind(mapping_read_, mapping_write_)
}
# Mapping: returns a tibble with columns
# format_key character, spectra_key character, writable logical
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
# Fill up mapping with formatKey where formatReadKey / formatWriteKey are not explicitely set
mapping_ <- mapping_ %>% map( function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
entry
})
# Remove empty entries
mapping_read <- mapping_ %>% keep(~ length(.x$formatReadKey) > 0)
mapping_write <- mapping_ %>% keep(~ length(.x$formatWriteKey) > 0)
mapping_dfr_read <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
}
mapping_read_ <- map_dfr(mapping_read, mapping_dfr_read)
mapping_dfr_write <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey)),
formatKey = entry$formatWriteKey,
type = rep("read", length(entry$formatWriteKey)))
}
mapping_write_ <- map_dfr(mapping_write, mapping_dfr_write)
rbind(mapping_read_, mapping_write_)
}
spectraMapping(mapping)
mp <- spectraMapping(mapping)
View(mp)
# Mapping: returns a tibble with columns
# format_key character, spectra_key character, writable logical
spectraMapping <- function(mapping) {
if(is(mapping, "MsFormatMapping"))
mapping_ <- mapping
else
mapping_ <- yaml.load_file(mapping)
# Fill up mapping with formatKey where formatReadKey / formatWriteKey are not explicitely set
mapping_ <- mapping_ %>% map( function(entry) {
if(is.null(entry$formatReadKey))
entry$formatReadKey <- entry$formatKey
if(is.null(entry$formatWriteKey))
entry$formatWriteKey <- entry$formatKey
entry
})
# Remove empty entries
mapping_read <- mapping_ %>% keep(~ length(.x$formatReadKey) > 0)
mapping_write <- mapping_ %>% keep(~ length(.x$formatWriteKey) > 0)
mapping_dfr_read <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatReadKey)),
formatKey = entry$formatReadKey,
type = rep("read", length(entry$formatReadKey)))
}
mapping_read_ <- map_dfr(mapping_read, mapping_dfr_read)
mapping_dfr_write <- function(entry, type)
{
tibble(spectraKey = rep(entry$spectraKey, length(entry$formatWriteKey)),
formatKey = entry$formatWriteKey,
type = rep("write", length(entry$formatWriteKey)))
}
mapping_write_ <- map_dfr(mapping_write, mapping_dfr_write)
rbind(mapping_read_, mapping_write_)
}
mp <- spectraMapping(mapping)
View(mp)
.mgf_mapping <- function() {
mapping <- loadSpectraMapping("../inst/mapping/mgf-schema.yaml")
return(spectraMapping(mapping))
}
MgfFormat <- function() {
return list(
reader = .mgf_reader(),
mapping = .mgf_mapping(),
writer = function(...) error("not implemented yet")
)
}
MgfFormat <- function() {
return(list(
reader = .mgf_reader(),
mapping = .mgf_mapping(),
writer = function(...) error("not implemented yet")
))
}
?setClass
class(tibble())
source('C:/Daten/git/MsBackendSchema/R/mgf-format.R', echo=TRUE)
class(dummyFormat) <- c(class(dummyFormat), "MsFormat")
dummyFormat <- list()
class(dummyFormat) <- c(class(dummyFormat), "MsFormat")
setClass("MsBackendSchema",
contains = "MsBackendDataFrame",
slots = c(format = "MsFormat",
variables = "data.frame",
peaks = "data.frame"
),
prototype = prototype(spectraData = DataFrame(),
format = dummyFormat,
variables = tibble(),
peaks = tibble(),
readonly = FALSE,
version = "0.1"))
dummyFormat
setOldClass("dummyFormat")
setClass("MsBackendSchema",
contains = "MsBackendDataFrame",
slots = c(format = "MsFormat",
variables = "data.frame",
peaks = "data.frame"
),
prototype = prototype(spectraData = DataFrame(),
format = dummyFormat,
variables = tibble(),
peaks = tibble(),
readonly = FALSE,
version = "0.1"))
dummyFormat <- list()
class(dummyFormat) <- c("MsFormat", class(dummyFormat))
setOldClass("MsFormat")
setClass("MsBackendSchema",
contains = "MsBackendDataFrame",
slots = c(format = "MsFormat",
variables = "data.frame",
peaks = "data.frame"
),
prototype = prototype(spectraData = DataFrame(),
format = dummyFormat,
variables = tibble(),
peaks = tibble(),
readonly = FALSE,
version = "0.1"))
dummyFormat <- list()
class(dummyFormat) <- c(class(dummyFormat), "MsFormat")
setOldClass("MsFormat")
setClass("MsBackendSchema",
contains = "MsBackendDataFrame",
slots = c(format = "MsFormat",
variables = "data.frame",
peaks = "data.frame"
),
prototype = prototype(spectraData = DataFrame(),
format = dummyFormat,
variables = tibble(),
peaks = tibble(),
readonly = FALSE,
version = "0.1"))
#' @rdname MsBackendSchema
#'
#' @importFrom methods new
#'
#' @export MsBackendSchema
MsBackendSchema <- function(format) {
new("MsBackendSchema", format = format)
}
MsBackendSchema(MsFormatMgf())
source('C:/Daten/git/MsBackendSchema/R/mgf-format.R', echo=TRUE)
MsBackendSchema(MsFormatMgf())
MsFormatMgf <- function() {
format <- list(
reader = .mgf_reader(),
mapping = .mgf_mapping(),
writer = function(...) error("not implemented yet")
)
class(format) <- c("MsFormat", class(format))
format
}
MsBackendSchema(MsFormatMgf())
path_ms2 <- "../inst/test_spectra/sample.mgf"
data_ms2 <- path_ms2 %>% read_file() %>% str_remove_all(fixed("\r"))
mgf_reader <- .mgf_reader(parallel = TRUE)
data_ms2_split <- data_ms2 %>% str_split(fixed("\n\n"))
data_ms2_split <- data_ms2_split[[1]]
rr <- mgf_reader(data_ms2_split)
rr
data_ms2 <- path_ms2 %>% read_file() %>% str_remove_all(fixed("\r"))
mgf_reader <- .mgf_reader(parallel = TRUE)
rr <- mgf_reader(data_ms2)
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
new(Spectra, source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp <- new(Spectra, source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp <- Spectra(files= "../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
source('C:/Daten/git/MsBackendSchema/R/parser-utils.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/mgf-parser.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/functions-schema.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
source('C:/Daten/git/MsBackendSchema/R/mgf-format.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
library(furrr)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp@backend@peaks
sp@backend@variables
plan(multiprocess())
source('C:/Daten/git/MsBackendSchema/R/functions-schema.R', echo=TRUE)
plan(multiprocess
)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp@backend@peaks
sp@backend@variables
source('C:/Daten/git/MsBackendSchema/R/mgf-parser.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/mgf-format.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/functions-schema.R', echo=TRUE)
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp@backend@variables
path_ms2 <- "../inst/test_spectra/sample.mgf"
data_ms2 <- path_ms2 %>% read_file() %>% str_remove_all(fixed("\r"))
plan(multiprocess)
mgf_reader <- .mgf_reader(parallel = TRUE)
data <- mgf_reader(data_ms2)
data
source('C:/Daten/git/MsBackendSchema/R/mgf-parser.R', echo=TRUE)
mgf_reader <- .mgf_reader(parallel = TRUE)
data <- mgf_reader(data_ms2)
data[1:5]
source('C:/Daten/git/MsBackendSchema/R/test-mgf.R', echo=TRUE)
sp@backend@variables
sp@backend@format
o <- sp@backend
vars_ <- o@format$mapping %>% filter(type=="read")
o$
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key"))
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider(spectraKey)
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider("spectraKey")
?pivot_wider
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider(id_cols = "spectrum_id",
names_from = "formatKey",
values_from = "value")
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider(id_cols = "spectrum_id",
names_from = "spectrumKey",
values_from = "value")
vars_table <- vars_ %>%
left_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider(id_cols = "spectrum_id",
names_from = "spectraKey",
values_from = "value")
View(vars_table)
vars_table <- vars_ %>%
inner_join(o@variables, by = c("formatKey" = "key")) %>%
pivot_wider(id_cols = "spectrum_id",
names_from = "spectraKey",
values_from = "value")
View(vars_table)
DataFrame(vars_table)
o@peaks
source('C:/Daten/git/MsBackendSchema/R/MsBackendSchema.R', echo=TRUE)
source("mgf-parser.R")
source("mgf-format.R")
source("functions-schema.R")
source("MsBackendSchema.R")
plan(multiprocess)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
sp <- Spectra()
source('C:/Daten/git/MsBackendSchema/R/functions-schema.R', echo=TRUE)
source("mgf-parser.R")
source("mgf-format.R")
source("functions-schema.R")
source("MsBackendSchema.R")
plan(multiprocess)
sp <- Spectra("../inst/test_spectra/sample.mgf", source = MsBackendSchema(format = MsFormatMgf(parallel=TRUE)))
source('C:/Daten/git/MsBackendSchema/R/test-mgf.R', echo=TRUE)
mz(sp)
library(S4Vectors)
mz(sp)
library(IRanges)
mz(sp)
mz(sp)[4]
sp2:8]
sp[2:8]
spsub <- sp[2:8]
mz(spsub)
#' @rdname hidden_aliases
setMethod("as.list", "MsBackendSchema", function(x) {
if (!length(x))
return(list())
x@peaks %>%
filter(spectrum_id %in% x@spectraData$spectrum_id) %>%
group_by(spectrum_id) %>%
group_split() %>%
map(~ as.matrix(.x[,c("mz", "int")]))
})
mz(spsub)
intensity(spsub)
ionCount(spsub)
ionCount(sp)
setMethod("ionCount", "MsBackendSchema", function(object) {
.subset_peaks(x) %>%
group_by(spectrum_id) %>%
n()
})
.subset_peaks <- function(o) {
o@peaks %>%
filter(spectrum_id %in% o@spectraData$spectrumId)
}
ionCount(sp)
ionCount(spsub)
setMethod("ionCount", "MsBackendSchema", function(object) {
.subset_peaks(x) %>%
group_by(spectrum_id) %>%
n()
})
ionCount(spsub)
setMethod("ionCount", "MsBackendSchema", function(object) {
.subset_peaks(object) %>%
group_by(spectrum_id) %>%
n()
})
ionCount(spsub)
options(error=recover)
ionCount(spsub)
sp
spsub
source('C:/Daten/git/MsBackendSchema/R/test-mgf.R', echo=TRUE)
spsub <- sp[2;8]
spsub <- sp[2:8]
ionCount(spsub)
options(error=recover)
ionCount(spsub)
Q
library(MsBackendMgf)
spsp <- Spectra("../inst/test_spectra/sample.mgf", source=MsBackendMgf())
sp2sub <- spsp[4:10]
ionCount(sp2sub)
